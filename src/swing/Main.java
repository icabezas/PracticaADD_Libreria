/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swing;

import daos.ColeccionDAO;
import daos.LibroColeccionDAO;
import daos.LibroDAO;
import daos.LibroGeneroDAO;
import exceptiones.LibreriaExcepciones;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import modelo.Coleccion;
import modelo.Genero;
import modelo.Libro;
import static swing.BookCreator.cont;
import swing.GeneroSelector.OnDisposeListener;

/**
 *
 * @author dam2t1
 */
public class Main extends javax.swing.JFrame implements Añadirlibrerias.OnDisposeListener {

    DefaultListModel<String> demolist2 = new DefaultListModel<>();
    private ArrayList<Coleccion> listaUser;
    private ArrayList<Libro> listaLibros;
    ColeccionDAO c = new ColeccionDAO();
    LibroDAO libroDAO = new LibroDAO();
    LibroColeccionDAO co = new LibroColeccionDAO();
    LibroGeneroDAO g = new LibroGeneroDAO();
    private String listChoosed;

    /**
     * Creates new form main
     */
    public Main() {
        this.setTitle("LOREM IPSUM");
        this.setIconImages(Swim.icons);
        initComponents();
        colectionsView();
        menu.setVisible(false);
        if (Swim.userSession.isIsAdmin() == true) {
            menu.setVisible(true);
        }
        for (int i = 0; i < listaUser.size(); i++) {
            System.out.print(listaUser.get(i));
        }
    }

    private void colectionsView() {
        try {
            demolist2.clear();
            list.setModel(demolist2);
            listaUser = (ArrayList<Coleccion>) c.getAllColeccionesUsuario(Swim.userSession.getIdUsuario());
            for (int i = 0; i < listaUser.size(); i++) {
                demolist2.addElement(listaUser.get(i).getNombre());
            }
        } catch (LibreriaExcepciones ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void colectionsViewDelete() {
        int mySize = list.getComponentCount();
        System.out.println(mySize);
        for (int i = 0; i < mySize; i++) {
            demolist2.remove(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listBook = new javax.swing.JList<>();
        createlibrary = new javax.swing.JButton();
        choose = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        des = new javax.swing.JButton();
        eliminarColeccion = new javax.swing.JButton();
        menu = new javax.swing.JMenuBar();
        getion = new javax.swing.JMenu();
        createBook = new javax.swing.JMenuItem();
        deleteBook = new javax.swing.JMenuItem();
        bookList = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel1.setText("Mis colecciones");

        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(list);

        jLabel2.setText("----------------------------------------------------------------");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jScrollPane2.setViewportView(listBook);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        createlibrary.setText("Crear colección");
        createlibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createlibraryActionPerformed(evt);
            }
        });

        choose.setText("Importar una colección");
        choose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseActionPerformed(evt);
            }
        });

        jButton2.setText("Exportar una colección");

        des.setText("Desconectar");
        des.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desActionPerformed(evt);
            }
        });

        eliminarColeccion.setText("Eliminar colección");
        eliminarColeccion.setToolTipText("Elimina la colección seleccionada");
        eliminarColeccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarColeccionActionPerformed(evt);
            }
        });

        menu.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        getion.setText("Gestion de datos");

        createBook.setText("Crear libro");
        createBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBookActionPerformed(evt);
            }
        });
        getion.add(createBook);

        deleteBook.setText("Eliminar libro");
        deleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookActionPerformed(evt);
            }
        });
        getion.add(deleteBook);

        bookList.setText("Ver lista de libros");
        bookList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookListActionPerformed(evt);
            }
        });
        getion.add(bookList);

        menu.add(getion);

        jMenu1.setText("Gestion de usuarios");

        jMenuItem3.setText("Borrar usuarios");
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Ver lista de usuario");
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Añadir libreria a un usuario");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenu2.setText("Ver lista de librerias de todos los usuarios");
        jMenu1.add(jMenu2);

        menu.add(jMenu1);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(createlibrary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(choose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(des)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(eliminarColeccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(createlibrary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eliminarColeccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(choose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(des))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createlibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createlibraryActionPerformed
        if (libroDAO.getListaLibrosBBDD() == null) {
            JOptionPane.showMessageDialog(null, "No hay libros en la DB");
        } else {
            Añadirlibrerias principal = new Añadirlibrerias(this);
            // para centrarlo

            principal.setLocationRelativeTo(null);
            principal.setVisible(true);
        }

    }//GEN-LAST:event_createlibraryActionPerformed

    private void chooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("txt ", "xml ");
        fc.setFileFilter(filter);
        int response = fc.showOpenDialog(null);
        try {
            if (response == JFileChooser.APPROVE_OPTION) {
                String pathName = fc.getSelectedFile().getPath();
                //implementar aqui lo de edu
            } else {
                JOptionPane.showMessageDialog(null, "Error al elegir archivo");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_chooseActionPerformed

    private void desActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desActionPerformed
        Interfaz interfaz = new Interfaz();
        interfaz.setLocationRelativeTo(null);
        interfaz.setVisible(true);
        dispose();

    }//GEN-LAST:event_desActionPerformed

    private void deleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookActionPerformed
        BookDestroyer principal = new BookDestroyer();
        // para centrarlo
        principal.setLocationRelativeTo(null);
        principal.setVisible(true);
    }//GEN-LAST:event_deleteBookActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void createBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBookActionPerformed
        try {
            BookCreator principal = new BookCreator();
            // para centrarlo
            principal.setLocationRelativeTo(null);
            principal.setVisible(true);
        } catch (LibreriaExcepciones ex) {
            JOptionPane.showMessageDialog(null, "Error fatal", "Error message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_createBookActionPerformed

    private void bookListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookListActionPerformed

    private void listMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMousePressed
        if (!demolist2.isEmpty()) {
            listChoosed = list.getSelectedValue();
            int pos = list.locationToIndex(evt.getPoint());
            listaLibros = (ArrayList<Libro>) co.getLibrosDadaColeccion(listaUser.get(pos).getIdColeccion());
            DefaultListModel<String> demolist3 = new DefaultListModel<>();
            listBook.setModel(demolist3);

            for (Libro l : listaLibros) {
                String genes = "";
                try {
                    ArrayList<Genero> gen = g.getLibroGenero(l.getIdLibro());
                    for (Genero g : gen) {
                        genes += g.getNombre() + " | ";
                    }
                } catch (LibreriaExcepciones ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                String infoLibro = l.getTitulo() + " | " + l.getAutor() + " | " + l.getIsbn() + " | " + l.getIdioma() + " | " + genes;
                demolist3.addElement(infoLibro + " | " + l.getPrecio() + " | " + " | " + l.getEdicion());
            }
        }
    }//GEN-LAST:event_listMousePressed

    private void eliminarColeccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarColeccionActionPerformed
        // TODO add your handling code here:
        List<String> coleccionesSeleccionadas = new ArrayList<>();
        coleccionesSeleccionadas = list.getSelectedValuesList();
        if (!coleccionesSeleccionadas.isEmpty()) {
            String message = "Se eliminaran las siguientes colecciones:";
            for (String nombre : coleccionesSeleccionadas) {
                message += "\n" + nombre;
            }
            int confirmDelete = JOptionPane.showConfirmDialog(null, message, "", NORMAL);
            if (confirmDelete == 0) {
                for (String nombre : coleccionesSeleccionadas) {
                    try {
                        c.borrarColeccion(nombre, Swim.userSession.getIdUsuario());
                    } catch (LibreriaExcepciones ex) {
                        JOptionPane.showMessageDialog(null, "Error al intentar eliminar: " + nombre, "Error message", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debes seleccionar alguna colección para eliminar", "Error message", JOptionPane.ERROR_MESSAGE);
        }
        mainRepaint();
    }//GEN-LAST:event_eliminarColeccionActionPerformed
    @Override
    public void mainRepaint() {
//        colectionsViewDelete();
        colectionsView();
        repaint();

    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bookList;
    private javax.swing.JButton choose;
    private javax.swing.JMenuItem createBook;
    private javax.swing.JButton createlibrary;
    private javax.swing.JMenuItem deleteBook;
    private javax.swing.JButton des;
    private javax.swing.JButton eliminarColeccion;
    private javax.swing.JMenu getion;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> list;
    private javax.swing.JList<String> listBook;
    private javax.swing.JMenuBar menu;
    // End of variables declaration//GEN-END:variables

}
